# -*- coding: utf-8 -*-
"""ML-Task02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-CPjwG2yReaSWx9RkONSxA039gR93ql
"""

#Prodigy-ML-02

#A K-means clustering algorithm to group customers of a retail store based on their purchase history.

# Import necessary libraries
import pandas as pd

# Upload the file
from google.colab import files
uploaded = files.upload()

# Check uploaded files
print(uploaded.keys())  # Ensure 'Mall_Customers.csv' is in the list

# Load data into a DataFrame
import io
try:
    df = pd.read_csv(io.BytesIO(uploaded['Mall_Customers.csv']))
    # Display the first few rows and basic info about the dataset
    print(df.head())
    print(df.info())
except KeyError:
    print("File 'Mall_Customers.csv' not found in the uploaded files.")

# Step 2: Select relevant features

# Selecting 'Annual Income (k$)' and 'Spending Score'
X = df.iloc[:, [3, 4]].values  # Assuming 3rd and 4th columns are 'Annual Income (k$)' and 'Spending Score'

# Step 3: Normalize the data

from sklearn.preprocessing import StandardScaler

# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 4: Choose the number of clusters (K) using the Elbow method

import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

# Calculating WCSS for different values of K
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plotting the Elbow curve
plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('WCSS (Within Cluster Sum of Squares)')
plt.title('Elbow Method for Optimal K')
plt.show()

# Step 5: Train the K-means model with the chosen K

# Choosing K=5 based on the Elbow method
k = 5
kmeans = KMeans(n_clusters=k, init='k-means++', random_state=42)
kmeans.fit(X_scaled)

# Adding the cluster labels to the original DataFrame
df['Cluster'] = kmeans.labels_

# Step 6: Visualize the clusters

plt.figure(figsize=(12, 8))
plt.scatter(X_scaled[:, 0], X_scaled[:, 1], c=kmeans.labels_, cmap='viridis', s=50, alpha=0.8, label='Data Points')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c='red', marker='*', label='Centroids')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (scaled)')
plt.ylabel('Spending Score (scaled)')
plt.legend()
plt.show()

#Crafted With Love by Sam Naveenkumar .V